package com.example.bu_bustracker;

import android.Manifest;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.Interpolator;
import android.graphics.drawable.BitmapDrawable;
import android.location.Location;
import android.os.Handler;
import android.os.SystemClock;
import android.support.annotation.NonNull;


import android.support.v4.app.FragmentActivity;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.View;
import android.view.animation.LinearInterpolator;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationCallback;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationResult;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.weiwangcn.betterspinner.library.material.MaterialBetterSpinner;


import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Stream;

import BusFinderModule.BusHelper;
import BusFinderModule.GetTheBus;
import DirectionModule.DirectionFinder;
import DirectionModule.DirectionFinderListener;
import DirectionModule.Route;

public class ShowDirectionBus extends FragmentActivity implements
        GoogleMap.OnMyLocationButtonClickListener,
        GoogleMap.OnMyLocationClickListener,
        DirectionFinderListener,
        OnMapReadyCallback {


    private static final String TAG = ShowDirectionBus.class.getSimpleName();
    private static final int LOCATION_PERMISSION_REQUEST_CODE = 1;
    private HashMap<String, Marker> mMarkers = new HashMap<>();
    private GoogleMap mMap;
    private boolean mPermissionDenied = false;

    private Button btnFindPath;
    private List<Circle> originMarkers = new ArrayList<Circle>();
    private List<Marker> destinationMarkers = new ArrayList<>();
    private List<Polyline> polylinePaths = new ArrayList<>();
    private ProgressDialog progressDialog;
    private  MaterialBetterSpinner  destSpinner;
    private  MaterialBetterSpinner  originSpinner;
    HashMap<String, String> busStoppagesHasMap;

    TextView textView;
    private boolean isMarkerRotating;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maps);
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
        btnFindPath = (Button) findViewById(R.id.btnFindPath);
        originSpinner = (MaterialBetterSpinner) findViewById(R.id.etOrigin);
        destSpinner = (MaterialBetterSpinner) findViewById(R.id.etDestination);
        isMarkerRotating = false;
       // textView = findViewById(R.id.yeasb);

        //lat lng stoppages

        Resources res = this.getResources();
        String[] busStopages = res.getStringArray(R.array.destinition);
        String[] stoppageLatLng = res.getStringArray(R.array.latitude_longitude_bus_stoppages);
        busStoppagesHasMap = new HashMap<String, String>();
        for(int i=0; i<busStopages.length; i++) {
            busStoppagesHasMap.put(busStopages[i], stoppageLatLng[i]);
        }



        ArrayAdapter<CharSequence> adapter1 = ArrayAdapter.createFromResource(this,
                R.array.origin, android.R.layout.simple_dropdown_item_1line);
        adapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        originSpinner.setAdapter(adapter1);


        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this,
                R.array.destinition, android.R.layout.simple_dropdown_item_1line);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        destSpinner.setAdapter(adapter);
        requestLocationUpdates();

    }

    private void sendRequest( HashMap<String, String> mBusStoppagesHasMap,String mCurrentLocation) {
        String origin = originSpinner.getText().toString();
        String destination = destSpinner.getText().toString();
        String latLngOrigin = mBusStoppagesHasMap.get(origin);
        String latLngDestination = mBusStoppagesHasMap.get(destination);

        if (origin.equals("Your Current Location")){
            latLngOrigin = mCurrentLocation.toString();
            String nearStoppages = getNearestStoppages(mBusStoppagesHasMap,mCurrentLocation);
            Log.d(TAG,nearStoppages);
            Toast.makeText(this,nearStoppages,Toast.LENGTH_LONG).show();
        }
        if (origin.isEmpty()) {
            Toast.makeText(this, "Please enter origin address!", Toast.LENGTH_SHORT).show();
            return;
        }
        if (destination.isEmpty()) {
            Toast.makeText(this, "Please enter destination address!", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            new DirectionFinder(this, latLngOrigin, latLngDestination).execute();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        // Authenticate with Firebase when the Google map is loaded
        mMap = googleMap;
        mMap.setMaxZoomPreference(16);
        mMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
        enableMyLocation();
    }

    private void enableMyLocation() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {
            // Permission to access the location is missing.
            PermissionUtils.requestPermission(this, LOCATION_PERMISSION_REQUEST_CODE,
                    Manifest.permission.ACCESS_FINE_LOCATION, true);
        } else if (mMap != null) {
            // Access to the location has been granted to the app.

            mMap.setMyLocationEnabled(true);
        }
    }

    @Override
    public boolean onMyLocationButtonClick() {
        Toast.makeText(this, "MyLocation button clicked", Toast.LENGTH_SHORT).show();
        // Return false so that we don't consume the event and the default behavior still occurs
        // (the camera animates to the user's current position).
        return false;
    }

    @Override
    public void onMyLocationClick(@NonNull Location location) {
        //LatLng ll = new LatLng(location.getLatitude(), location.getLongitude());
        Toast.makeText(this, "Current location:\n" + location, Toast.LENGTH_LONG).show();
    }


    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        if (requestCode != LOCATION_PERMISSION_REQUEST_CODE) {
            return;
        }

        if (PermissionUtils.isPermissionGranted(permissions, grantResults,
                Manifest.permission.ACCESS_FINE_LOCATION)) {
            // Enable the my location layer if the permission has been granted.
            enableMyLocation();
        } else {
            // Display the missing permission error dialog when the fragments resume.
            mPermissionDenied = true;
        }
    }

    @Override
    protected void onResumeFragments() {
        super.onResumeFragments();
        if (mPermissionDenied) {
            // Permission was not granted, display error dialog.
            showMissingPermissionError();
            mPermissionDenied = false;
        }
    }

    /**
     * Displays a dialog with error message explaining that the location permission is missing.
     */
    private void showMissingPermissionError() {
        PermissionUtils.PermissionDeniedDialog
                .newInstance(true).show(getSupportFragmentManager(), "dialog");
    }

    private void loginToFirebase() {
        String email = getString(R.string.firebase_email);
        String password = getString(R.string.firebase_password);
        // Authenticate with Firebase and subscribe to updates
        FirebaseAuth.getInstance().signInWithEmailAndPassword(
                email, password).addOnCompleteListener(new OnCompleteListener<AuthResult>() {
            @Override
            public void onComplete(Task<AuthResult> task) {
                if (task.isSuccessful()) {
                    subscribeToUpdates();
                    Log.v(TAG, "firebase auth success");
                } else {
                    Log.v(TAG, "firebase auth failed");
                }
            }
        });
    }

    private void subscribeToUpdates() {
        DatabaseReference ref = FirebaseDatabase.getInstance().getReference(getString(R.string.firebase_path));
        ref.addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String previousChildName) {
                setMarker(dataSnapshot);
            }

            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String previousChildName) {
                setMarker(dataSnapshot);
            }

            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String previousChildName) {
            }

            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {
            }

            @Override
            public void onCancelled(DatabaseError error) {
                Log.v(TAG, "Failed to read value.", error.toException());
            }
        });
    }

    private void setMarker(DataSnapshot dataSnapshot) {
        // When a location update is received, put or update
        // its value in mMarkers, which contains all the markers
        // for locations received, so that we can build the
        // boundaries required to show them all on the map at once
        String key = dataSnapshot.getKey();
        HashMap<String, Object> value = (HashMap<String, Object>) dataSnapshot.getValue();
        double lat = Double.parseDouble(value.get("latitude").toString());
        double lng = Double.parseDouble(value.get("longitude").toString());
        float bearing = Float.parseFloat(value.get("bearing").toString());
        LatLng location = new LatLng(lat, lng);
        if (!mMarkers.containsKey(key)) {
            String origin = originSpinner.getText().toString();
            String destination = destSpinner.getText().toString();
            String latLngOrigin = busStoppagesHasMap.get(origin);
            String latLngDestination = busStoppagesHasMap.get(destination);

//            GetTheBus getTheBus =new GetTheBus(this,latLngOrigin,latLngDestination
//            ,origin,destination);
//            ArrayList<String> availableBus = getTheBus.getAvailableBusses();
            //Toast.makeText(this, availableBus.get(0),Toast.LENGTH_LONG).show();

            int height = 100;
            int width = 100;
            Bitmap b=BusHelper.getBitmapFromVectorDrawable(this,R.drawable.ic_navigation_black_24dp);
            Bitmap smallMarker = Bitmap.createScaledBitmap(b, width, height, false);
                Marker marker = mMap.addMarker(new MarkerOptions().title(key)
                        .icon(BitmapDescriptorFactory.fromBitmap(smallMarker))
                        .position(location)
                        .rotation(bearing));
                mMarkers.put(key, marker);

        } else {
            mMarkers.get(key).setPosition(location);
        }
        LatLngBounds.Builder builder = new LatLngBounds.Builder();
        for (Marker marker : mMarkers.values()) {
            builder.include(marker.getPosition());
        }
    }

    @Override
    public void onDirectionFinderStart() {
        progressDialog = ProgressDialog.show(this, "Please wait.",
                "Finding direction..!", true);

        if (originMarkers != null) {
            for (Circle marker : originMarkers) {
                marker.remove();
            }
        }

        if (destinationMarkers != null) {
            for (Marker marker : destinationMarkers) {
                marker.remove();
            }
        }

        if (polylinePaths != null) {
            for (Polyline polyline : polylinePaths) {
                polyline.remove();
            }
        }
    }

    @Override
    public void onDirectionFinderSuccess(List<Route> routes) {
        progressDialog.dismiss();
        polylinePaths = new ArrayList<>();
        originMarkers = new ArrayList<Circle>();
        destinationMarkers = new ArrayList<>();
        loginToFirebase();
        for (Route route : routes) {
            mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(route.startLocation, 16));
            ((TextView) findViewById(R.id.tvDuration)).setText(route.duration.text);
            ((TextView) findViewById(R.id.tvDistance)).setText(route.distance.text);

//            originMarkers.add(mMap.addMarker(new MarkerOptions()
//                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.start_blue))
//                    .title(route.startAddress)
//                    .position(route.startLocation)));
            originMarkers.add(mMap.addCircle(new CircleOptions()
                    .center(route.startLocation)
                    .radius(50)
                    .strokeColor(Color.BLUE)
                    .fillColor(Color.GREEN)));
            destinationMarkers.add(mMap.addMarker(new MarkerOptions()
                    .title(route.endAddress)
                    .position(route.endLocation)));

            PolylineOptions polylineOptions = new PolylineOptions().
                    geodesic(true).
                    color(Color.BLUE).
                    width(15);

            for (int i = 0; i < route.points.size(); i++)
                polylineOptions.add(route.points.get(i));

            polylinePaths.add(mMap.addPolyline(polylineOptions));
        }
    }

    private void requestLocationUpdates() {
        LocationRequest request = new LocationRequest();
        request.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        FusedLocationProviderClient client = LocationServices.getFusedLocationProviderClient(this);
        int permission = ContextCompat.checkSelfPermission(this,
                Manifest.permission.ACCESS_FINE_LOCATION);
        if (permission == PackageManager.PERMISSION_GRANTED) {
            // Request location updates and when an update is
            // received, store the location in Firebase
            client.requestLocationUpdates(request, new LocationCallback() {
                @Override
                public void onLocationResult(LocationResult locationResult) {
                    Location location = locationResult.getLastLocation();
                    if (location != null) {
                        Log.d(TAG, "location update " + location);
                        //  Toast.makeText(TrackerService.this, location.toString(), Toast.LENGTH_SHORT).show();
                        String gb = String.valueOf(location.getLatitude()+","+location.getLongitude());
                        btnFindPath.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                sendRequest(busStoppagesHasMap,gb);
                            }
                        });

                    }
                }
            }, null);
        }
    }

    private float getDistance(double startLatitude,double startLongitude,
                                         double endLatitude,double endLongitude){
        float results = (float) distance(startLatitude,startLongitude,endLatitude,endLongitude);
        return results;
    }
    private String getNearestStoppages(HashMap<String, String> mBusStoppagesHasMap,String mCurrentLocation){

        HashMap<String,Float> distance = new HashMap<String, Float>();
        Set keys = mBusStoppagesHasMap.keySet();

        for (Iterator i = keys.iterator(); i.hasNext(); ) {
            String key = (String) i.next();
            String value = (String) mBusStoppagesHasMap.get(key);
            double[] currentOrigin = new double[0];
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
                currentOrigin = Stream.of(mCurrentLocation.split(","))
                        .mapToDouble (Double::parseDouble)
                        .toArray();
            }
            double[] destination = new double[0];
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
                destination = Stream.of(value.split(","))
                        .mapToDouble (Double::parseDouble)
                        .toArray();
            }
            float dis;
            dis = getDistance(currentOrigin[0],currentOrigin[1],destination[0],destination[1]);
            distance.put(key,dis);

        }

        String minKey = null;
        Float minValue = Float.MAX_VALUE;
        for (Map.Entry<String, Float> entry : distance.entrySet()) {
            Float value = entry.getValue();
            if (value < minValue) {
                minKey = entry.getKey();
                minValue = value;
            }
        }

        double[] nearestStopages = getDouble(mBusStoppagesHasMap.get(minKey));
        Circle circle = mMap.addCircle(new CircleOptions()
                .center(new LatLng(nearestStopages[0],nearestStopages[1]))
                .radius(100)
                .strokeWidth(2)
                .strokeColor(Color.parseColor("#2271cce7"))
                .fillColor(0x5500ff00));

        return minKey;

    }
    private double distance(double lat1, double lon1, double lat2, double lon2) {
        double theta = lon1 - lon2;
        double dist = Math.sin(deg2rad(lat1))
                * Math.sin(deg2rad(lat2))
                + Math.cos(deg2rad(lat1))
                * Math.cos(deg2rad(lat2))
                * Math.cos(deg2rad(theta));
        dist = Math.acos(dist);
        dist = rad2deg(dist);
        dist = dist * 60 * 1.1515;
        return (dist);
    }

    private double deg2rad(double deg) {
        return (deg * Math.PI / 180.0);
    }

    private double rad2deg(double rad) {
        return (rad * 180.0 / Math.PI);
    }

    private double[] getDouble(String str){
      return  Stream.of(str.split(","))
                .mapToDouble (Double::parseDouble)
                .toArray();

    }

}